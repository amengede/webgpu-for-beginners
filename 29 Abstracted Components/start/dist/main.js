(()=>{"use strict";var e,t,n,r,i={927:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var r=n(127),i=n(344);const e=document.getElementById("gfx-main"),s=document.getElementById("sphere-count"),a=new r.Z;await a.make_scene(),s.innerText=a.triangles.length.toString();const o=new i.A(e,a);await o.Initialize(),t()}catch(e){t(e)}}),1)},344:(e,t,n)=>{n.d(t,{A:()=>s});const r="@group(0) @binding(0) var screen_sampler : sampler;\r\n@group(0) @binding(1) var color_buffer : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) TexCoord : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n\r\n    var positions = array<vec2<f32>, 6>(\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>( 1.0, -1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0,  1.0)\r\n    );\r\n\r\n    var texCoords = array<vec2<f32>, 6>(\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(1.0, 1.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(0.0, 0.0)\r\n    );\r\n\r\n    var output : VertexOutput;\r\n    output.Position = vec4<f32>(positions[VertexIndex], 0.0, 1.0);\r\n    output.TexCoord = texCoords[VertexIndex];\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn frag_main(@location(0) TexCoord : vec2<f32>) -> @location(0) vec4<f32> {\r\n  return textureSample(color_buffer, screen_sampler, TexCoord);\r\n}";class i{async initialize(e,t){for(var n=new Array(6),r=0;r<6;r++){const e=await fetch(t[r]),i=await e.blob();n[r]=await createImageBitmap(i)}await this.loadImageBitmaps(e,n),this.view=this.texture.createView({format:"rgba8unorm",dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6}),this.sampler=e.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"nearest",mipmapFilter:"nearest",maxAnisotropy:1})}async loadImageBitmaps(e,t){const n={dimension:"2d",size:{width:t[0].width,height:t[0].height,depthOrArrayLayers:6},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT};this.texture=e.createTexture(n);for(var r=0;r<6;r++)e.queue.copyExternalImageToTexture({source:t[r]},{texture:this.texture,origin:[0,0,r]},[t[r].width,t[r].height])}}class s{constructor(e,t){this.render=()=>{let e=performance.now();this.scene.update(this.frametime),this.prepareScene();const t=this.device.createCommandEncoder(),n=t.beginComputePass();n.setPipeline(this.ray_tracing_pipeline),n.setBindGroup(0,this.ray_tracing_bind_group),n.dispatchWorkgroups(this.canvas.width/8,this.canvas.height/8,1),n.end();const r=this.context.getCurrentTexture().createView(),i=t.beginRenderPass({colorAttachments:[{view:r,clearValue:{r:.5,g:0,b:.25,a:1},loadOp:"clear",storeOp:"store"}]});i.setPipeline(this.screen_pipeline),i.setBindGroup(0,this.screen_bind_group),i.draw(6,1,0,0),i.end(),this.device.queue.submit([t.finish()]),this.device.queue.onSubmittedWorkDone().then((()=>{let t=performance.now();this.frametime=t-e;let n=document.getElementById("render-time");n&&(n.innerText=this.frametime.toString())})),requestAnimationFrame(this.render)},this.canvas=e,this.scene=t}async Initialize(){await this.setupDevice(),await this.makeBindGroupLayouts(),await this.createAssets(),await this.makeBindGroups(),await this.makePipelines(),this.frametime=16,this.loaded=!1,this.render()}async setupDevice(){var e,t;this.adapter=await(null===(e=navigator.gpu)||void 0===e?void 0:e.requestAdapter()),this.device=await(null===(t=this.adapter)||void 0===t?void 0:t.requestDevice()),this.context=this.canvas.getContext("webgpu"),this.format="bgra8unorm",this.context.configure({device:this.device,format:this.format,alphaMode:"opaque"})}async makeBindGroupLayouts(){this.ray_tracing_bind_group_layout=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:"rgba8unorm",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage",hasDynamicOffset:!1}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage",hasDynamicOffset:!1}},{binding:4,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage",hasDynamicOffset:!1}},{binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage",hasDynamicOffset:!1}},{binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage",hasDynamicOffset:!1}},{binding:7,visibility:GPUShaderStage.COMPUTE,texture:{viewDimension:"cube"}},{binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),this.screen_bind_group_layout=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]})}async createAssets(){this.color_buffer=this.device.createTexture({size:{width:this.canvas.width,height:this.canvas.height},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}),this.color_buffer_view=this.color_buffer.createView(),this.sampler=this.device.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"nearest",mipmapFilter:"nearest",maxAnisotropy:1});const e={size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};this.sceneParameters=this.device.createBuffer(e);const t={size:112*this.scene.triangles.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST};this.triangleBuffer=this.device.createBuffer(t);const n={size:32*this.scene.nodes.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST};this.nodeBuffer=this.device.createBuffer(n);const r={size:80*this.scene.blasDescriptions.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST};this.blasDescriptionBuffer=this.device.createBuffer(r);const s={size:4*this.scene.triangles.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST};this.triangleIndexBuffer=this.device.createBuffer(s);const a={size:4*this.scene.blasIndices.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST};this.blasIndexBuffer=this.device.createBuffer(a),this.sky_texture=new i,await this.sky_texture.initialize(this.device,["dist/gfx/sky_front.png","dist/gfx/sky_back.png","dist/gfx/sky_left.png","dist/gfx/sky_right.png","dist/gfx/sky_bottom.png","dist/gfx/sky_top.png"])}async makeBindGroups(){this.ray_tracing_bind_group=this.device.createBindGroup({layout:this.ray_tracing_bind_group_layout,entries:[{binding:0,resource:this.color_buffer_view},{binding:1,resource:{buffer:this.sceneParameters}},{binding:2,resource:{buffer:this.triangleBuffer}},{binding:3,resource:{buffer:this.nodeBuffer}},{binding:4,resource:{buffer:this.blasDescriptionBuffer}},{binding:5,resource:{buffer:this.triangleIndexBuffer}},{binding:6,resource:{buffer:this.blasIndexBuffer}},{binding:7,resource:this.sky_texture.view},{binding:8,resource:this.sky_texture.sampler}]}),this.screen_bind_group=this.device.createBindGroup({layout:this.screen_bind_group_layout,entries:[{binding:0,resource:this.sampler},{binding:1,resource:this.color_buffer_view}]})}async makePipelines(){const e=this.device.createPipelineLayout({bindGroupLayouts:[this.ray_tracing_bind_group_layout]});this.ray_tracing_pipeline=this.device.createComputePipeline({layout:e,compute:{module:this.device.createShaderModule({code:"struct Sphere {\n    center: vec3<f32>,\n    color: vec3<f32>,\n    radius: f32,\n}\n\nstruct Triangle {\n    corner_a: vec3<f32>,\n    //float\n    normal_a: vec3<f32>,\n    //float\n    corner_b: vec3<f32>,\n    //float\n    normal_b: vec3<f32>,\n    //float\n    corner_c: vec3<f32>,\n    //float\n    normal_c: vec3<f32>,\n    //float\n    color: vec3<f32>,\n    //float\n}\n\nstruct ObjectData {\n    triangles: array<Triangle>,\n}\n\nstruct Node {\n    minCorner: vec3<f32>,\n    leftChild: f32,\n    maxCorner: vec3<f32>,\n    primitiveCount: f32,\n}\n\nstruct blasDescription {\n    inverseModel: mat4x4<f32>,\n    rootNodeIndex: vec4<f32>,\n}\n\nstruct BVH {\n    nodes: array<Node>,\n}\n\nstruct blasDescriptions {\n    descriptions: array<blasDescription>,\n}\n\nstruct ObjectIndices {\n    primitiveIndices: array<f32>,\n}\n\nstruct Ray {\n    direction: vec3<f32>,\n    origin: vec3<f32>,\n}\n\nstruct SceneData {\n    cameraPos: vec3<f32>,\n    cameraForwards: vec3<f32>,\n    cameraRight: vec3<f32>,\n    maxBounces: f32,\n    cameraUp: vec3<f32>,\n}\n\nstruct RenderState {\n    color: vec3<f32>,\n    t: f32,\n    normal: vec3<f32>,\n    hit: bool,\n}\n\n@group(0) @binding(0) var color_buffer: texture_storage_2d<rgba8unorm, write>;\n@group(0) @binding(1) var<uniform> scene: SceneData;\n@group(0) @binding(2) var<storage, read> objects: ObjectData;\n@group(0) @binding(3) var<storage, read> tree: BVH;\n@group(0) @binding(4) var<storage, read> blas: blasDescriptions;\n@group(0) @binding(5) var<storage, read> triangleLookup: ObjectIndices;\n@group(0) @binding(6) var<storage, read> blasLookup: ObjectIndices;\n@group(0) @binding(7) var skyTexture: texture_cube<f32>;\n@group(0) @binding(8) var skySampler: sampler;\n\n@compute @workgroup_size(8,8,1)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n\n    let screen_size: vec2<i32> = vec2<i32>(textureDimensions(color_buffer));\n    let screen_pos : vec2<i32> = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y));\n\n    let horizontal_coefficient: f32 = (f32(screen_pos.x) - f32(screen_size.x) / 2) / f32(screen_size.x);\n    let vertical_coefficient: f32 = (f32(screen_pos.y) - f32(screen_size.y) / 2) / f32(screen_size.x);\n\n    let forwards: vec3<f32> = scene.cameraForwards;\n    let right: vec3<f32> = scene.cameraRight;\n    let up: vec3<f32> = scene.cameraUp;\n\n    var myRay: Ray;\n    myRay.direction = normalize(forwards + horizontal_coefficient * right + vertical_coefficient * up);\n    myRay.origin = scene.cameraPos;\n\n    let pixel_color : vec3<f32> = rayColor(myRay);\n\n    textureStore(color_buffer, screen_pos, vec4<f32>(pixel_color, 1.0));\n}\n\nfn rayColor(ray: Ray) -> vec3<f32> {\n\n    var color: vec3<f32> = vec3(1.0, 1.0, 1.0);\n    var result: RenderState;\n\n    var world_ray: Ray;\n    world_ray.origin = ray.origin;\n    world_ray.direction = ray.direction;\n\n    let bounces: u32 = u32(scene.maxBounces);\n    for(var bounce: u32 = 0; bounce < bounces; bounce++) {\n\n        result = trace_tlas(world_ray);\n\n        if (!result.hit) {\n            //sky color\n            color = color * textureSampleLevel(skyTexture, skySampler, world_ray.direction, 0.0).xyz;\n            break;\n        }\n\n        //unpack color\n        color = color * result.color;\n\n        //Set up for next trace\n        world_ray.origin = world_ray.origin + result.t * world_ray.direction;\n        world_ray.direction = normalize(reflect(world_ray.direction, result.normal));\n    }\n\n    //Rays which reached terminal state and bounced indefinitely\n    if (result.hit) {\n        color = vec3(0.0, 0.0, 0.0);\n    }\n\n    return color;\n}\n\nfn trace_tlas(ray: Ray) -> RenderState {\n\n    //Set up the Render State\n    var renderState: RenderState;\n    renderState.hit = false;\n    var nearestHit: f32 = 9999;\n\n    //Set up for BVH Traversal\n    var node: Node = tree.nodes[0];\n    var stack: array<Node, 20>;\n    var stackLocation: u32 = 0;\n\n    while (true) {\n\n        var primitiveCount: u32 = u32(node.primitiveCount);\n        var contents: u32 = u32(node.leftChild);\n\n        if (primitiveCount == 0) {\n            var child1: Node = tree.nodes[contents];\n            var child2: Node = tree.nodes[contents + 1];\n\n            var distance1: f32 = hit_aabb(ray, child1);\n            var distance2: f32 = hit_aabb(ray, child2);\n            if (distance1 > distance2) {\n                var tempDist: f32 = distance1;\n                distance1 = distance2;\n                distance2 = tempDist;\n\n                var tempChild: Node = child1;\n                child1 = child2;\n                child2 = tempChild;\n            }\n\n            if (distance1 > nearestHit) {\n                if (stackLocation == 0) {\n                    break;\n                }\n                else {\n                    stackLocation -= 1;\n                    node = stack[stackLocation];\n                }\n            }\n            else {\n                node = child1;\n                if (distance2 < nearestHit) {\n                    stack[stackLocation] = child2;\n                    stackLocation += 1;\n                }\n            }\n        }\n        else {\n            for (var i: u32 = 0; i < primitiveCount; i++) {\n        \n                var newRenderState: RenderState = trace_blas(\n                    ray, \n                    blas.descriptions[u32(blasLookup.primitiveIndices[i + contents])], \n                    nearestHit,\n                    renderState\n                );\n\n                if (newRenderState.hit) {\n                    nearestHit = newRenderState.t;\n                    renderState = newRenderState;\n                }\n            }\n\n            if (stackLocation == 0) {\n                break;\n            }\n            else {\n                stackLocation -= 1;\n                node = stack[stackLocation];\n            }\n        }\n    }\n\n    return renderState;\n}\n\nfn trace_blas(\n    ray: Ray, \n    description: blasDescription,\n    nearestHit: f32,\n    renderState: RenderState) -> RenderState {\n\n    var object_ray: Ray;\n    object_ray.origin = (description.inverseModel * vec4<f32>(ray.origin, 1.0)).xyz;\n    object_ray.direction = (description.inverseModel * vec4<f32>(ray.direction, 0.0)).xyz;\n\n    //Set up the Render State\n    var blasRenderState: RenderState;\n    blasRenderState.t = renderState.t;\n    blasRenderState.normal = renderState.normal;\n    blasRenderState.color = renderState.color;\n    blasRenderState.hit = false;\n\n    var blasNearestHit: f32 = nearestHit;\n\n    //Set up for BVH Traversal\n    var node: Node = tree.nodes[u32(description.rootNodeIndex.x)];\n    var stack: array<Node, 20>;\n    var stackLocation: u32 = 0;\n\n    while (true) {\n\n        var primitiveCount: u32 = u32(node.primitiveCount);\n        var contents: u32 = u32(node.leftChild);\n\n        if (primitiveCount == 0) {\n            var child1: Node = tree.nodes[contents];\n            var child2: Node = tree.nodes[contents + 1];\n\n            var distance1: f32 = hit_aabb(object_ray, child1);\n            var distance2: f32 = hit_aabb(object_ray, child2);\n            if (distance1 > distance2) {\n                var tempDist: f32 = distance1;\n                distance1 = distance2;\n                distance2 = tempDist;\n\n                var tempChild: Node = child1;\n                child1 = child2;\n                child2 = tempChild;\n            }\n\n            if (distance1 > blasNearestHit) {\n                if (stackLocation == 0) {\n                    break;\n                }\n                else {\n                    stackLocation -= 1;\n                    node = stack[stackLocation];\n                }\n            }\n            else {\n                node = child1;\n                if (distance2 < blasNearestHit) {\n                    stack[stackLocation] = child2;\n                    stackLocation += 1;\n                }\n            }\n        }\n        else {\n            for (var i: u32 = 0; i < primitiveCount; i++) {\n        \n                var newRenderState: RenderState = hit_triangle(\n                    object_ray, \n                    objects.triangles[u32(triangleLookup.primitiveIndices[i + contents])], \n                    0.001, blasNearestHit, blasRenderState\n                );\n\n                if (newRenderState.hit) {\n                    blasNearestHit = newRenderState.t;\n                    blasRenderState = newRenderState;\n                }\n            }\n\n            if (stackLocation == 0) {\n                break;\n            }\n            else {\n                stackLocation -= 1;\n                node = stack[stackLocation];\n            }\n        }\n    }\n\n    if (blasRenderState.hit) {\n        blasRenderState.normal = normalize(\n            (transpose(description.inverseModel) * vec4(blasRenderState.normal, 0.0)).xyz\n        );\n    }\n\n    return blasRenderState;\n}\n\nfn hit_sphere(ray: Ray, sphere: Sphere, tMin: f32, oldRenderState: RenderState) -> RenderState {\n    \n    let co: vec3<f32> = ray.origin - sphere.center;\n    let a: f32 = dot(ray.direction, ray.direction);\n    let b: f32 = 2.0 * dot(ray.direction, co);\n    let c: f32 = dot(co, co) - sphere.radius * sphere.radius;\n    let discriminant: f32 = b * b - 4.0 * a * c;\n\n    var renderState: RenderState;\n    renderState.color = oldRenderState.color;\n\n    if (discriminant > 0.0) {\n\n        let t: f32 = (-b - sqrt(discriminant)) / (2 * a);\n\n        if (t > tMin && t < oldRenderState.t) {\n            renderState.t = t;\n            renderState.color = sphere.color;\n            renderState.hit = true;\n            return renderState;\n        }\n    }\n\n    renderState.hit = false;\n    return renderState;\n    \n}\n\nfn hit_triangle(\n    ray: Ray, tri: Triangle, \n    tMin: f32, tMax:f32,\n    oldRenderState: RenderState) -> RenderState {\n\n    var renderState: RenderState;\n    renderState.color = oldRenderState.color;\n    renderState.hit = false;\n\n    //Direction vectors\n    let edge_ab: vec3<f32> = tri.corner_b - tri.corner_a;\n    let edge_ac: vec3<f32> = tri.corner_c - tri.corner_a;\n    //Normal of the triangle\n    var n: vec3<f32> = normalize(cross(edge_ab, edge_ac));\n    var ray_dot_tri: f32 = dot(ray.direction, n);\n    //backface reversal\n    if (ray_dot_tri > 0.0) {\n        //ray_dot_tri = ray_dot_tri * -1;\n        //n = n * -1;\n        return renderState;\n    }\n    //early exit, ray parallel with triangle surface\n    if (abs(ray_dot_tri) < 0.00001) {\n        return renderState;\n    }\n\n    var system_matrix: mat3x3<f32> = mat3x3<f32>(\n        ray.direction,\n        tri.corner_a - tri.corner_b,\n        tri.corner_a - tri.corner_c\n    );\n    let denominator: f32 = determinant(system_matrix);\n    if (abs(denominator) < 0.00001) {\n        return renderState;\n    }\n\n    system_matrix = mat3x3<f32>(\n        ray.direction,\n        tri.corner_a - ray.origin,\n        tri.corner_a - tri.corner_c\n    );\n    let u: f32 = determinant(system_matrix) / denominator;\n    \n    if (u < 0.0 || u > 1.0) {\n        return renderState;\n    }\n\n    system_matrix = mat3x3<f32>(\n        ray.direction,\n        tri.corner_a - tri.corner_b,\n        tri.corner_a - ray.origin,\n    );\n    let v: f32 = determinant(system_matrix) / denominator;\n    if (v < 0.0 || u + v > 1.0) {\n        return renderState;\n    }\n\n    system_matrix = mat3x3<f32>(\n        tri.corner_a - ray.origin,\n        tri.corner_a - tri.corner_b,\n        tri.corner_a - tri.corner_c\n    );\n    let t: f32 = determinant(system_matrix) / denominator;\n\n    if (t > tMin && t < tMax) {\n        renderState.normal = (1.0 - u - v) * tri.normal_a + u * tri.normal_b + v * tri.normal_c;\n        renderState.color = tri.color;\n        renderState.t = t;\n        renderState.hit = true;\n        return renderState;\n    }\n\n    return renderState;\n}\n\nfn hit_aabb(ray: Ray, node: Node) -> f32 {\n\n    var inverseDir: vec3<f32> = vec3(1.0) / ray.direction;\n    var t1: vec3<f32> = (node.minCorner - ray.origin) * inverseDir;\n    var t2: vec3<f32> = (node.maxCorner - ray.origin) * inverseDir;\n    var tMin: vec3<f32> = min(t1, t2);\n    var tMax: vec3<f32> = max(t1, t2);\n\n    var t_min: f32 = max(max(tMin.x, tMin.y), tMin.z);\n    var t_max: f32 = min(min(tMax.x, tMax.y), tMax.z);\n\n    if (t_min > t_max || t_max < 0) {\n        return 99999;\n    }\n    else {\n        return t_min;\n    }\n}"}),entryPoint:"main"}});const t=this.device.createPipelineLayout({bindGroupLayouts:[this.screen_bind_group_layout]});this.screen_pipeline=this.device.createRenderPipeline({layout:t,vertex:{module:this.device.createShaderModule({code:r}),entryPoint:"vert_main"},fragment:{module:this.device.createShaderModule({code:r}),entryPoint:"frag_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"}})}prepareScene(){const e={cameraPos:this.scene.camera.position,cameraForwards:this.scene.camera.forwards,cameraRight:this.scene.camera.right,cameraUp:this.scene.camera.up};this.device.queue.writeBuffer(this.sceneParameters,0,new Float32Array([e.cameraPos[0],e.cameraPos[1],e.cameraPos[2],0,e.cameraForwards[0],e.cameraForwards[1],e.cameraForwards[2],0,e.cameraRight[0],e.cameraRight[1],e.cameraRight[2],4,e.cameraUp[0],e.cameraUp[1],e.cameraUp[2],0]),0,16);const t=new Float32Array(20*this.scene.blasDescriptions.length);for(let e=0;e<this.scene.blasDescriptions.length;e++){for(let n=0;n<16;n++)t[20*e+n]=this.scene.blasDescriptions[e].inverseModel.at(n);t[20*e+16]=this.scene.blasDescriptions[e].rootNodeIndex,t[20*e+17]=this.scene.blasDescriptions[e].rootNodeIndex,t[20*e+18]=this.scene.blasDescriptions[e].rootNodeIndex,t[20*e+19]=this.scene.blasDescriptions[e].rootNodeIndex}this.device.queue.writeBuffer(this.blasDescriptionBuffer,0,t,0,20*this.scene.blasDescriptions.length);const n=new Float32Array(this.scene.blasIndices.length);for(let e=0;e<this.scene.blasIndices.length;e++)n[e]=this.scene.blasIndices[e];this.device.queue.writeBuffer(this.blasIndexBuffer,0,n,0,this.scene.blasIndices.length);var r=new Float32Array(8*this.scene.nodesUsed);for(let e=0;e<this.scene.nodesUsed;e++)r[8*e]=this.scene.nodes[e].minCorner[0],r[8*e+1]=this.scene.nodes[e].minCorner[1],r[8*e+2]=this.scene.nodes[e].minCorner[2],r[8*e+3]=this.scene.nodes[e].leftChild,r[8*e+4]=this.scene.nodes[e].maxCorner[0],r[8*e+5]=this.scene.nodes[e].maxCorner[1],r[8*e+6]=this.scene.nodes[e].maxCorner[2],r[8*e+7]=this.scene.nodes[e].primitiveCount;if(this.device.queue.writeBuffer(this.nodeBuffer,0,r,0,8*this.scene.nodesUsed),this.loaded)return;this.loaded=!0;const i=new Float32Array(28*this.scene.triangles.length);for(let e=0;e<this.scene.triangles.length;e++){for(var s=0;s<3;s++)i[28*e+8*s]=this.scene.triangles[e].corners[s][0],i[28*e+8*s+1]=this.scene.triangles[e].corners[s][1],i[28*e+8*s+2]=this.scene.triangles[e].corners[s][2],i[28*e+8*s+3]=0,i[28*e+8*s+4]=this.scene.triangles[e].normals[s][0],i[28*e+8*s+5]=this.scene.triangles[e].normals[s][1],i[28*e+8*s+6]=this.scene.triangles[e].normals[s][2],i[28*e+8*s+7]=0;for(var a=0;a<3;a++)i[28*e+24+a]=this.scene.triangles[e].color[a];i[28*e+27]=0}this.device.queue.writeBuffer(this.triangleBuffer,0,i,0,28*this.scene.triangles.length);var o=new Float32Array(8*this.scene.statue_mesh.nodesUsed);for(let e=0;e<this.scene.statue_mesh.nodesUsed;e++){let t=this.scene.tlasNodesMax+e;o[8*e]=this.scene.nodes[t].minCorner[0],o[8*e+1]=this.scene.nodes[t].minCorner[1],o[8*e+2]=this.scene.nodes[t].minCorner[2],o[8*e+3]=this.scene.nodes[t].leftChild,o[8*e+4]=this.scene.nodes[t].maxCorner[0],o[8*e+5]=this.scene.nodes[t].maxCorner[1],o[8*e+6]=this.scene.nodes[t].maxCorner[2],o[8*e+7]=this.scene.nodes[t].primitiveCount}let c=32*this.scene.tlasNodesMax;this.device.queue.writeBuffer(this.nodeBuffer,c,o,0,8*this.scene.statue_mesh.nodesUsed);const d=new Float32Array(this.scene.triangles.length);for(let e=0;e<this.scene.triangles.length;e++)d[e]=this.scene.triangleIndices[e];this.device.queue.writeBuffer(this.triangleIndexBuffer,0,d,0,this.scene.triangles.length)}}},127:(e,t,n)=>{n.d(t,{Z:()=>p});var r="undefined"!=typeof Float32Array?Float32Array:Array;function i(){var e=new r(3);return r!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function s(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}function a(e,t,n){return e[0]=Math.min(t[0],n[0]),e[1]=Math.min(t[1],n[1]),e[2]=Math.min(t[2],n[2]),e}function o(e,t,n){return e[0]=Math.max(t[0],n[0]),e[1]=Math.max(t[1],n[1]),e[2]=Math.max(t[2],n[2]),e}function c(e,t,n){var r=t[0],i=t[1],s=t[2],a=n[0],o=n[1],c=n[2];return e[0]=i*c-s*o,e[1]=s*a-r*c,e[2]=r*o-i*a,e}function d(e){return e*Math.PI/180}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)}),i();class l{constructor(e){this.position=new Float32Array(e),this.theta=0,this.phi=0,this.recalculate_vectors()}recalculate_vectors(){this.forwards=new Float32Array([Math.cos(d(this.theta))*Math.cos(d(this.phi)),Math.sin(d(this.theta))*Math.cos(d(this.phi)),Math.sin(d(this.theta))]),this.right=new Float32Array([0,0,0]),c(this.right,this.forwards,[0,0,1]),this.up=new Float32Array([0,0,0]),c(this.up,this.right,this.forwards)}}class h{}class u{constructor(){this.corners=[],this.normals=[]}build_from_center_and_offsets(e,t,n){this.centroid=[0,0,0];const r=[.33333,.33333,.33333];t.forEach((t=>{var n=[e[0],e[1],e[2]];this.corners.push([n[0]+t[0],n[1]+t[1],n[2]+t[2]]);var i,s,a,o=[n[0],n[1],n[2]];(function(e,t,n){e[0]=t[0]*n[0],e[1]=t[1]*n[1],e[2]=t[2]*n[2]})(o,o,r),i=this.centroid,s=this.centroid,a=o,i[0]=s[0]+a[0],i[1]=s[1]+a[1],i[2]=s[2]+a[2]}));var i=[0,0,0];c(i,[this.corners[1][0]-this.corners[0][0],this.corners[1][1]-this.corners[0][1],this.corners[1][2]-this.corners[0][2]],[this.corners[1][0]-this.corners[0][0],this.corners[1][1]-this.corners[0][1],this.corners[1][2]-this.corners[0][2]]),this.normals.push(i),this.normals.push(i),this.normals.push(i),this.color=n}make_centroid(){this.centroid=[(this.corners[0][0]+this.corners[1][0]+this.corners[2][0])/3,(this.corners[0][1]+this.corners[1][1]+this.corners[2][1])/3,(this.corners[0][2]+this.corners[1][2]+this.corners[2][2])/3]}}class f{constructor(){this.v=[],this.vt=[],this.vn=[],this.triangles=[],this.minCorner=[999999,999999,999999],this.maxCorner=[-999999,-999999,-999999]}async initialize(e,t){this.color=e,await this.readFile(t),this.v=[],this.vt=[],this.vn=[],this.buildBVH()}async readFile(e){var t=[];const n=await fetch(e),r=await n.blob();(await r.text()).split("\n").forEach((e=>{"v"==e[0]&&" "==e[1]?this.read_vertex_data(e):"v"==e[0]&&"t"==e[1]?this.read_texcoord_data(e):"v"==e[0]&&"n"==e[1]?this.read_normal_data(e):"f"==e[0]&&this.read_face_data(e,t)}))}read_vertex_data(e){const t=e.split(" "),n=[Number(t[1]).valueOf(),Number(t[2]).valueOf(),Number(t[3]).valueOf()];this.v.push(n),a(this.minCorner,this.minCorner,n),o(this.maxCorner,this.maxCorner,n)}read_texcoord_data(e){const t=e.split(" "),n=[Number(t[1]).valueOf(),Number(t[2]).valueOf()];this.vt.push(n)}read_normal_data(e){const t=e.split(" "),n=[Number(t[1]).valueOf(),Number(t[2]).valueOf(),Number(t[3]).valueOf()];this.vn.push(n)}read_face_data(e,t){const n=(e=e.replace("\n","")).split(" "),r=n.length-3;for(var i=0;i<r;i++){var s=new u;this.read_corner(n[1],s),this.read_corner(n[2+i],s),this.read_corner(n[3+i],s),s.color=this.color,s.make_centroid(),this.triangles.push(s)}}read_corner(e,t){const n=e.split("/"),r=this.v[Number(n[0]).valueOf()-1],i=(this.vt[Number(n[1]).valueOf()-1],this.vn[Number(n[2]).valueOf()-1]);t.corners.push(r),t.normals.push(i)}buildBVH(){this.triangleIndices=new Array(this.triangles.length);for(var e=0;e<this.triangles.length;e+=1)this.triangleIndices[e]=e;for(this.nodes=new Array(2*this.triangles.length-1),e=0;e<2*this.triangles.length-1;e+=1)this.nodes[e]=new h;var t=this.nodes[0];t.leftChild=0,t.primitiveCount=this.triangles.length,this.nodesUsed=1,this.updateBounds(0),this.subdivide(0)}updateBounds(e){var t=this.nodes[e];t.minCorner=[999999,999999,999999],t.maxCorner=[-999999,-999999,-999999];for(var n=0;n<t.primitiveCount;n+=1)this.triangles[this.triangleIndices[t.leftChild+n]].corners.forEach((e=>{a(t.minCorner,t.minCorner,e),o(t.maxCorner,t.maxCorner,e)}))}subdivide(e){var t=this.nodes[e];if(t.primitiveCount<2)return;var n=[0,0,0];s(n,t.maxCorner,t.minCorner);var r=0;n[1]>n[r]&&(r=1),n[2]>n[r]&&(r=2);const i=t.minCorner[r]+n[r]/2;for(var a=t.leftChild,o=a+t.primitiveCount-1;a<=o;)if(this.triangles[this.triangleIndices[a]].centroid[r]<i)a+=1;else{var c=this.triangleIndices[a];this.triangleIndices[a]=this.triangleIndices[o],this.triangleIndices[o]=c,o-=1}var d=a-t.leftChild;if(0==d||d==t.primitiveCount)return;const l=this.nodesUsed;this.nodesUsed+=1;const h=this.nodesUsed;this.nodesUsed+=1,this.nodes[l].leftChild=t.leftChild,this.nodes[l].primitiveCount=d,this.nodes[h].leftChild=a,this.nodes[h].primitiveCount=t.primitiveCount-d,t.leftChild=l,t.primitiveCount=0,this.updateBounds(l),this.updateBounds(h),this.subdivide(l),this.subdivide(h)}}function m(){var e=new r(16);return r!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}class v{constructor(e,t){this.position=e,this.eulers=t,this.calculate_transform()}update(e){this.eulers[2]+=.5*e,this.eulers[2]>360&&(this.eulers[2]-=360),this.calculate_transform()}calculate_transform(){var e,t,n,r,i,s,a,o,c,l,h,u,f,v,g,p,b,_;this.model=m(),e=this.model,t=this.model,p=(n=this.position)[0],b=n[1],_=n[2],t===e?(e[12]=t[0]*p+t[4]*b+t[8]*_+t[12],e[13]=t[1]*p+t[5]*b+t[9]*_+t[13],e[14]=t[2]*p+t[6]*b+t[10]*_+t[14],e[15]=t[3]*p+t[7]*b+t[11]*_+t[15]):(r=t[0],i=t[1],s=t[2],a=t[3],o=t[4],c=t[5],l=t[6],h=t[7],u=t[8],f=t[9],v=t[10],g=t[11],e[0]=r,e[1]=i,e[2]=s,e[3]=a,e[4]=o,e[5]=c,e[6]=l,e[7]=h,e[8]=u,e[9]=f,e[10]=v,e[11]=g,e[12]=r*p+o*b+u*_+t[12],e[13]=i*p+c*b+f*_+t[13],e[14]=s*p+l*b+v*_+t[14],e[15]=a*p+h*b+g*_+t[15]),function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[0],a=t[1],o=t[2],c=t[3],d=t[4],l=t[5],h=t[6],u=t[7];t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=s*i+d*r,e[1]=a*i+l*r,e[2]=o*i+h*r,e[3]=c*i+u*r,e[4]=d*i-s*r,e[5]=l*i-a*r,e[6]=h*i-o*r,e[7]=u*i-c*r}(this.model,this.model,d(this.eulers[2])),function(e,t,n){var r=Math.sin(n),i=Math.cos(n),s=t[4],a=t[5],o=t[6],c=t[7],d=t[8],l=t[9],h=t[10],u=t[11];t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=s*i+d*r,e[5]=a*i+l*r,e[6]=o*i+h*r,e[7]=c*i+u*r,e[8]=d*i-s*r,e[9]=l*i-a*r,e[10]=h*i-o*r,e[11]=u*i-c*r}(this.model,this.model,d(this.eulers[0]))}}class g{constructor(e,t,n){this.inverseModel=m(),this.minCorner=[999999,999999,999999],this.maxCorner=[-999999,-999999,-999999];var r=i();const s=[[e[0],e[1],e[2]],[e[0],e[1],t[2]],[e[0],t[1],e[2]],[e[0],t[1],t[2]],[t[0],e[1],e[2]],[t[0],e[1],t[2]],[t[0],t[1],e[2]],[t[0],t[1],t[2]]];for(let e=0;e<8;e++)c=r,l=n,void 0,void 0,void 0,v=void 0,h=(d=s[e])[0],u=d[1],f=d[2],v=(v=l[3]*h+l[7]*u+l[11]*f+l[15])||1,c[0]=(l[0]*h+l[4]*u+l[8]*f+l[12])/v,c[1]=(l[1]*h+l[5]*u+l[9]*f+l[13])/v,c[2]=(l[2]*h+l[6]*u+l[10]*f+l[14])/v,a(this.minCorner,this.minCorner,r),o(this.maxCorner,this.maxCorner,r);var c,d,l,h,u,f,v;this.center=[(this.minCorner[0]+this.maxCorner[0])/2,(this.minCorner[1]+this.maxCorner[1])/2,(this.minCorner[2]+this.maxCorner[2])/2],function(e,t){var n=t[0],r=t[1],i=t[2],s=t[3],a=t[4],o=t[5],c=t[6],d=t[7],l=t[8],h=t[9],u=t[10],f=t[11],m=t[12],v=t[13],g=t[14],p=t[15],b=n*o-r*a,_=n*c-i*a,y=n*d-s*a,x=r*c-i*o,C=r*d-s*o,S=i*d-s*c,w=l*v-h*m,U=l*g-u*m,B=l*p-f*m,I=h*g-u*v,M=h*p-f*v,R=u*p-f*g,P=b*R-_*M+y*I+x*B-C*U+S*w;P&&(P=1/P,e[0]=(o*R-c*M+d*I)*P,e[1]=(i*M-r*R-s*I)*P,e[2]=(v*S-g*C+p*x)*P,e[3]=(u*C-h*S-f*x)*P,e[4]=(c*B-a*R-d*U)*P,e[5]=(n*R-i*B+s*U)*P,e[6]=(g*y-m*S-p*_)*P,e[7]=(l*S-u*y+f*_)*P,e[8]=(a*M-o*B+d*w)*P,e[9]=(r*B-n*M-s*w)*P,e[10]=(m*C-v*y+p*b)*P,e[11]=(h*y-l*C-f*b)*P,e[12]=(o*U-a*I-c*w)*P,e[13]=(n*I-r*U+i*w)*P,e[14]=(v*_-m*x-g*b)*P,e[15]=(l*x-h*_+u*b)*P)}(this.inverseModel,n)}}class p{constructor(){this.nodesUsed=0,this.blas_consumed=!1,this.debugMode=!1,this.statue_mesh=new f,this.statues=new Array(9);var e=0;for(let t=-2;t<=2;t++)for(let n=-2;n<=2;n++)for(let r=-2;r<=2;r++)this.statues[e]=new v([2*n,2*t,4*r],[180,0,90]),e+=1;this.camera=new l([-6,0,-1])}async make_scene(){if(await this.statue_mesh.initialize([1,1,1],"dist/models/statue.obj"),this.debugMode){console.log("Bottom Level Acceleration Structure:");for(let e=0;e<this.statue_mesh.nodesUsed;e++){let t=this.statue_mesh.nodes[e];0==t.primitiveCount?(console.log("Internal Node:"),console.log("\tIndex: %d",e),console.log("\tleft child: %d, right child: %d",t.leftChild,t.leftChild+1)):(console.log("External Node:"),console.log("\tIndex: %d",e),console.log("\tfirst primitive index: %d, primitive count: %d",t.leftChild,t.primitiveCount)),console.log("\t Extent: (%f, %f, %f) -> (%f, %f, %f)",t.minCorner[0],t.minCorner[1],t.minCorner[2],t.maxCorner[0],t.maxCorner[1],t.maxCorner[2])}}this.triangles=[],this.statue_mesh.triangles.forEach((e=>{this.triangles.push(e)})),this.triangleIndices=[],this.statue_mesh.triangleIndices.forEach((e=>{this.triangleIndices.push(e)})),this.tlasNodesMax=2*this.statues.length-1;const e=this.statue_mesh.nodesUsed;this.nodes=new Array(this.tlasNodesMax+e);for(var t=0;t<this.tlasNodesMax+e;t+=1)this.nodes[t]=new h,this.nodes[t].leftChild=0,this.nodes[t].primitiveCount=0,this.nodes[t].minCorner=[0,0,0],this.nodes[t].maxCorner=[0,0,0];this.buildBVH(),this.finalizeBVH(),this.blas_consumed=!0}update(e){this.statues.forEach((t=>{t.update(e/16.667)})),this.buildBVH()}buildBVH(){const e=this.statue_mesh.nodesUsed;this.debugMode&&console.log("TLAS needs %d nodes, BLAS needs %d nodes, total: %d nodes",this.tlasNodesMax,e,this.tlasNodesMax+e),this.nodesUsed=0,this.blasDescriptions=new Array(this.statues.length),this.blasIndices=new Array(this.statues.length);for(var t=0;t<this.statues.length;t++){var n=new g(this.statue_mesh.minCorner,this.statue_mesh.maxCorner,this.statues[t].model);n.rootNodeIndex=this.tlasNodesMax,this.blasDescriptions[t]=n,this.blasIndices[t]=t}if(this.debugMode){console.log("BLAS descriptions:");for(let e=0;e<this.blasDescriptions.length;e++){let t=this.blasDescriptions[e];console.log("Index: %d",e),console.log("\t Extent: (%f, %f, %f) -> (%f, %f, %f)",t.minCorner[0],t.minCorner[1],t.minCorner[2],t.maxCorner[0],t.maxCorner[1],t.maxCorner[2]),console.log("\t Root node index: %d",t.rootNodeIndex)}}for(t=0;t<this.tlasNodesMax;t+=1)this.nodes[t].leftChild=0,this.nodes[t].primitiveCount=0,this.nodes[t].minCorner=[0,0,0],this.nodes[t].maxCorner=[0,0,0];var r=this.nodes[0];r.leftChild=0,r.primitiveCount=this.blasDescriptions.length,this.nodesUsed+=1,this.updateBounds(0),this.subdivide(0)}updateBounds(e){var t=this.nodes[e];t.minCorner=[999999,999999,999999],t.maxCorner=[-999999,-999999,-999999];for(var n=0;n<t.primitiveCount;n+=1){const e=this.blasDescriptions[this.blasIndices[t.leftChild+n]];a(t.minCorner,t.minCorner,e.minCorner),o(t.maxCorner,t.maxCorner,e.maxCorner)}}subdivide(e){var t=this.nodes[e];if(t.primitiveCount<2)return;var n=[0,0,0];s(n,t.maxCorner,t.minCorner);var r=0;n[1]>n[r]&&(r=1),n[2]>n[r]&&(r=2);const i=t.minCorner[r]+n[r]/2;for(var a=t.leftChild,o=a+t.primitiveCount-1;a<=o;)if(this.blasDescriptions[this.blasIndices[a]].center[r]<i)a+=1;else{var c=this.blasIndices[a];this.blasIndices[a]=this.blasIndices[o],this.blasIndices[o]=c,o-=1}var d=a-t.leftChild;if(0==d||d==t.primitiveCount)return;const l=this.nodesUsed;this.nodesUsed+=1;const h=this.nodesUsed;this.nodesUsed+=1,this.nodes[l].leftChild=t.leftChild,this.nodes[l].primitiveCount=d,this.nodes[h].leftChild=a,this.nodes[h].primitiveCount=t.primitiveCount-d,t.leftChild=l,t.primitiveCount=0,this.updateBounds(l),this.updateBounds(h),this.subdivide(l),this.subdivide(h)}finalizeBVH(){if(this.debugMode){console.log("BLAS mappings:");for(let e=0;e<this.blasIndices.length;e++)console.log("Index: %d maps to %d",e,this.blasIndices[e]);console.log("Top Level Acceleration Structure:");for(let e=0;e<this.nodesUsed;e++){let t=this.nodes[e];0==t.primitiveCount?(console.log("Internal Node:"),console.log("\tIndex: %d",e),console.log("\tleft child: %d, right child: %d",t.leftChild,t.leftChild+1)):(console.log("External Node:"),console.log("\tIndex: %d",e),console.log("\tfirst blas index: %d, blas count: %d",t.leftChild,t.primitiveCount)),console.log("\t Extent: (%f, %f, %f) -> (%f, %f, %f)",t.minCorner[0],t.minCorner[1],t.minCorner[2],t.maxCorner[0],t.maxCorner[1],t.maxCorner[2])}}for(var e=0;e<this.statue_mesh.nodesUsed;e++){var t=this.statue_mesh.nodes[e];0==t.primitiveCount&&(t.leftChild+=this.tlasNodesMax),this.nodes[this.tlasNodesMax+e]=t}if(this.debugMode){console.log("Final Nodes:");for(let e=0;e<this.nodes.length;e++){let t=this.nodes[e];0==t.primitiveCount?(console.log("Internal Node:"),console.log("\tIndex: %d",e),console.log("\tleft child: %d, right child: %d",t.leftChild,t.leftChild+1)):(console.log("External Node:"),console.log("\tIndex: %d",e),console.log("\tfirst primitive index: %d, primitive count: %d",t.leftChild,t.primitiveCount)),console.log("\t Extent: (%f, %f, %f) -> (%f, %f, %f)",t.minCorner[0],t.minCorner[1],t.minCorner[2],t.maxCorner[0],t.maxCorner[1],t.maxCorner[2])}}}}}},s={};function a(e){var t=s[e];if(void 0!==t)return t.exports;var n=s[e]={exports:{}};return i[e](n,n.exports,a),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(i,s,a)=>{var o;a&&((o=[]).d=-1);var c,d,l,h=new Set,u=i.exports,f=new Promise(((e,t)=>{l=t,d=e}));f[t]=u,f[e]=e=>(o&&e(o),h.forEach(e),f.catch((e=>{}))),i.exports=f,s((i=>{var s;c=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var s=[];s.d=0,i.then((e=>{a[t]=e,r(s)}),(e=>{a[n]=e,r(s)}));var a={};return a[e]=e=>e(s),a}}var o={};return o[e]=e=>{},o[t]=i,o})))(i);var a=()=>c.map((e=>{if(e[n])throw e[n];return e[t]})),d=new Promise((t=>{(s=()=>t(a)).r=0;var n=e=>e!==o&&!h.has(e)&&(h.add(e),e&&!e.d&&(s.r++,e.push(s)));c.map((t=>t[e](n)))}));return s.r?d:a()}),(e=>(e?l(f[n]=e):d(u),r(o)))),o&&o.d<0&&(o.d=0)},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a(927)})();