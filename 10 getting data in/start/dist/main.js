(()=>{"use strict";class e{constructor(e,r,t){this.center=new Float32Array(e),this.radius=r,this.color=new Float32Array(t)}}var r,t="undefined"!=typeof Float32Array?Float32Array:Array;function i(e,r,t){var i=r[0],n=r[1],o=r[2],a=t[0],s=t[1],c=t[2];return e[0]=n*c-o*s,e[1]=o*a-i*c,e[2]=i*s-n*a,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,r=arguments.length;r--;)e+=arguments[r]*arguments[r];return Math.sqrt(e)}),r=new t(3),t!=Float32Array&&(r[0]=0,r[1]=0,r[2]=0);class n{constructor(e){this.position=new Float32Array(e),this.theta=0,this.phi=0,this.recalculate_vectors()}recalculate_vectors(){this.forwards=new Float32Array([Math.cos(180*this.theta/Math.PI)*Math.cos(180*this.phi/Math.PI),Math.sin(180*this.theta/Math.PI)*Math.cos(180*this.phi/Math.PI),Math.sin(180*this.phi/Math.PI)]),this.right=new Float32Array([0,0,0]),i(this.right,this.forwards,[0,0,1]),this.up=new Float32Array([0,0,0]),i(this.up,this.right,this.forwards)}}const o="@group(0) @binding(0) var screen_sampler : sampler;\r\n@group(0) @binding(1) var color_buffer : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) TexCoord : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n\r\n    var positions = array<vec2<f32>, 6>(\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>( 1.0, -1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0,  1.0)\r\n    );\r\n\r\n    var texCoords = array<vec2<f32>, 6>(\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(1.0, 1.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(0.0, 0.0)\r\n    );\r\n\r\n    var output : VertexOutput;\r\n    output.Position = vec4<f32>(positions[VertexIndex], 0.0, 1.0);\r\n    output.TexCoord = texCoords[VertexIndex];\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn frag_main(@location(0) TexCoord : vec2<f32>) -> @location(0) vec4<f32> {\r\n  return textureSample(color_buffer, screen_sampler, TexCoord);\r\n}";var a=function(e,r,t,i){return new(t||(t=Promise))((function(n,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var r;e.done?n(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(a,s)}c((i=i.apply(e,r||[])).next())}))};const s=document.getElementById("gfx-main"),c=new class{constructor(){this.spheres=new Array(32);for(let r=0;r<this.spheres.length;r++){const t=[3+7*Math.random(),10*Math.random()-5,10*Math.random()-5],i=.1+1.9*Math.random(),n=[.3+.7*Math.random(),.3+.7*Math.random(),.3+.7*Math.random()];this.spheres[r]=new e(t,i,n)}this.camera=new n([-20,0,0])}},h=new class{constructor(e,r){this.render=()=>{const e=this.device.createCommandEncoder(),r=e.beginComputePass();r.setPipeline(this.ray_tracing_pipeline),r.setBindGroup(0,this.ray_tracing_bind_group),r.dispatchWorkgroups(Math.ceil(this.canvas.width/8),Math.ceil(this.canvas.height/8),1),r.end();const t=this.context.getCurrentTexture().createView(),i=e.beginRenderPass({colorAttachments:[{view:t,clearValue:{r:.5,g:0,b:.25,a:1},loadOp:"clear",storeOp:"store"}]});i.setPipeline(this.screen_pipeline),i.setBindGroup(0,this.screen_bind_group),i.draw(6,1,0,0),i.end(),this.device.queue.submit([e.finish()]),requestAnimationFrame(this.render)},this.canvas=e,this.scene=r}Initialize(){return a(this,void 0,void 0,(function*(){yield this.setupDevice(),yield this.createAssets(),yield this.makePipeline(),this.render()}))}setupDevice(){var e,r;return a(this,void 0,void 0,(function*(){this.adapter=yield null===(e=navigator.gpu)||void 0===e?void 0:e.requestAdapter(),this.device=yield null===(r=this.adapter)||void 0===r?void 0:r.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.format="bgra8unorm",this.context.configure({device:this.device,format:this.format,alphaMode:"opaque"})}))}makePipeline(){return a(this,void 0,void 0,(function*(){const e=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:"rgba8unorm",viewDimension:"2d"}}]});this.ray_tracing_bind_group=this.device.createBindGroup({layout:e,entries:[{binding:0,resource:this.color_buffer_view}]});const r=this.device.createPipelineLayout({bindGroupLayouts:[e]});this.ray_tracing_pipeline=this.device.createComputePipeline({layout:r,compute:{module:this.device.createShaderModule({code:"@group(0) @binding(0) var color_buffer: texture_storage_2d<rgba8unorm, write>;\r\n\r\nstruct Sphere {\r\n    center: vec3<f32>,\r\n    radius: f32,\r\n}\r\n\r\nstruct Ray {\r\n    direction: vec3<f32>,\r\n    origin: vec3<f32>,\r\n}\r\n\r\n@compute @workgroup_size(8,8,1)\r\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\r\n\r\n    let screen_size: vec2<i32> = vec2<i32>(textureDimensions(color_buffer));\r\n    let screen_pos : vec2<i32> = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y));\r\n\r\n    if (screen_pos.x >= screen_size.x || screen_pos.y >= screen_size.y) {\r\n        return;\r\n    }\r\n\r\n    let horizontal_coefficient: f32 = (f32(screen_pos.x) - f32(screen_size.x) / 2) / f32(screen_size.x);\r\n    let vertical_coefficient: f32 = (f32(screen_pos.y) - f32(screen_size.y) / 2) / f32(screen_size.x);\r\n    let forwards: vec3<f32> = vec3<f32>(1.0, 0.0, 0.0);\r\n    let right: vec3<f32> = vec3<f32>(0.0, -1.0, 0.0);\r\n    let up: vec3<f32> = vec3<f32>(0.0, 0.0, 1.0);\r\n\r\n    var mySphere: Sphere;\r\n    mySphere.center = vec3<f32>(3.0, 0.0, 0.0);\r\n    mySphere.radius = 1.0;\r\n\r\n    var myRay: Ray;\r\n    myRay.direction = normalize(forwards + horizontal_coefficient * right + vertical_coefficient * up);\r\n    myRay.origin = vec3<f32>(0.0, 0.0, 0.0);\r\n\r\n    var pixel_color : vec3<f32> = vec3<f32>(0.5, 0.0, 0.25);\r\n\r\n    if (hit(myRay, mySphere)) {\r\n        pixel_color = vec3<f32>(0.5, 1.0, 0.75);\r\n    }\r\n\r\n    textureStore(color_buffer, screen_pos, vec4<f32>(pixel_color, 1.0));\r\n}\r\n\r\nfn hit(ray: Ray, sphere: Sphere) -> bool {\r\n    \r\n    let a: f32 = dot(ray.direction, ray.direction);\r\n    let b: f32 = 2.0 * dot(ray.direction, ray.origin - sphere.center);\r\n    let c: f32 = dot(ray.origin - sphere.center, ray.origin - sphere.center) - sphere.radius * sphere.radius;\r\n    let discriminant: f32 = b * b - 4.0 * a * c;\r\n\r\n    return discriminant > 0;\r\n    \r\n}"}),entryPoint:"main"}});const t=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]});this.screen_bind_group=this.device.createBindGroup({layout:t,entries:[{binding:0,resource:this.sampler},{binding:1,resource:this.color_buffer_view}]});const i=this.device.createPipelineLayout({bindGroupLayouts:[t]});this.screen_pipeline=this.device.createRenderPipeline({layout:i,vertex:{module:this.device.createShaderModule({code:o}),entryPoint:"vert_main"},fragment:{module:this.device.createShaderModule({code:o}),entryPoint:"frag_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"}})}))}createAssets(){return a(this,void 0,void 0,(function*(){this.color_buffer=this.device.createTexture({size:{width:this.canvas.width,height:this.canvas.height},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}),this.color_buffer_view=this.color_buffer.createView(),this.sampler=this.device.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"nearest",mipmapFilter:"nearest",maxAnisotropy:1})}))}}(s,c);h.Initialize()})();